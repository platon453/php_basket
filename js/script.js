document.addEventListener('DOMContentLoaded', () => {
    // --- –û–ë–©–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø API ---
    async function api(action, data = {}) {
        try {
            const response = await fetch('api.php', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ action, ...data })
            });
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            return await response.json();
        } catch (error) {
            console.error("API Error:", error);
            return { cart: [] }; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∫–æ—Ä–∑–∏–Ω—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        }
    }

    // --- –õ–û–ì–ò–ö–ê –°–¢–†–ê–ù–ò–¶–´ –ö–û–†–ó–ò–ù–´ (cart.html) ---
    if (document.getElementById('full-cart-view')) {
        const fullCartView = document.getElementById('full-cart-view');
        const emptyCartView = document.getElementById('empty-cart-view');
        const itemsContainer = fullCartView.querySelector('.cart-items');
        const summaryContainer = fullCartView.querySelector('.order-summary');
        const itemsCountSpan = fullCartView.querySelector('.item-count');
        const clearCartBtn = fullCartView.querySelector('.clear-cart');

        const renderCart = (cart) => {
            if (!cart || cart.length === 0) {
                fullCartView.style.display = 'none';
                emptyCartView.style.display = 'flex';
                return;
            }

            fullCartView.style.display = 'block';
            emptyCartView.style.display = 'none';

            itemsContainer.innerHTML = '<h3>–¢–æ–≤–∞—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏</h3>';
            cart.forEach(item => {
                const itemHTML = `
                    <div class="cart-item" data-item-id="${item.id}">
                        <img src="${item.image}" alt="${item.title}" class="book-cover">
                        <div class="item-details">
                            <h4>${item.title}</h4>
                            <p class="author">${item.author}</p>
                        </div>
                        <div class="item-controls">
                            <div class="quantity-controls">
                                <button class="qty-btn minus" aria-label="–£–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ">-</button>
                                <span class="quantity">${item.quantity}</span>
                                <button class="qty-btn plus" aria-label="–£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ">+</button>
                            </div>
                            <div class="price-info">
                                <span class="current-price">${item.discountPrice * item.quantity} ‚ÇΩ</span>
                                ${item.price > item.discountPrice ? `<span class="original-price">${item.price * item.quantity} ‚ÇΩ</span>` : ''}
                            </div>
                        </div>
                        <div class="item-actions">
                            <button class="action-btn remove" aria-label="–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä">üóëÔ∏è</button>
                        </div>
                    </div>`;
                itemsContainer.insertAdjacentHTML('beforeend', itemHTML);
            });

            const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
            const totalPrice = cart.reduce((sum, item) => sum + item.discountPrice * item.quantity, 0);
            const totalOriginalPrice = cart.reduce((sum, item) => sum + item.price * item.quantity, 0);
            const totalDiscount = totalOriginalPrice - totalPrice;

            itemsCountSpan.textContent = `${totalItems} ${getNoun(totalItems, '—Ç–æ–≤–∞—Ä', '—Ç–æ–≤–∞—Ä–∞', '—Ç–æ–≤–∞—Ä–æ–≤')}`;
            
            summaryContainer.innerHTML = `
                <h3>–í–∞—à –∑–∞–∫–∞–∑</h3>
                <div class="summary-row">
                    <span>–¢–æ–≤–∞—Ä—ã (${totalItems})</span>
                    <span>${totalOriginalPrice} ‚ÇΩ</span>
                </div>
                ${totalDiscount > 0 ? `
                <div class="summary-row">
                    <span>–°–∫–∏–¥–∫–∞</span>
                    <span class="discount-amount">-${totalDiscount} ‚ÇΩ</span>
                </div>` : ''}
                <div class="summary-row total">
                    <span>–ò—Ç–æ–≥–æ</span>
                    <span>${totalPrice} ‚ÇΩ</span>
                </div>`;
        };

        const handleCartInteraction = async (e) => {
            const target = e.target;
            const itemEl = target.closest('.cart-item');
            
            if (target === clearCartBtn) {
                const { cart } = await api('clear');
                renderCart(cart);
                return;
            }

            if (!itemEl) return;

            const itemId = parseInt(itemEl.dataset.itemId, 10);
            let quantity = parseInt(itemEl.querySelector('.quantity').textContent, 10);

            if (target.matches('.plus')) quantity++;
            if (target.matches('.minus')) quantity--;
            if (target.matches('.remove')) quantity = 0;
            
            if (quantity < 0) quantity = 0;

            const { cart } = await api('update_quantity', { itemId, quantity });
            renderCart(cart);
        };
        
        fullCartView.addEventListener('click', handleCartInteraction);
        
        api('get').then(response => renderCart(response.cart));
    }

    // --- –õ–û–ì–ò–ö–ê –°–¢–†–ê–ù–ò–¶–´ –û–§–û–†–ú–õ–ï–ù–ò–Ø (checkout.html) ---
    if (document.querySelector('.checkout-form')) {
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ñ–∏–∑. –∏ —é—Ä. –ª–∏—Ü–æ–º
        const personTypeTabs = document.querySelectorAll('.person-type-tabs .tab');
        const personTypeContents = document.querySelectorAll('.checkout-form > .tab-content');

        personTypeTabs.forEach(tab => {
            tab.addEventListener('click', () => {
                personTypeTabs.forEach(t => t.classList.remove('active'));
                personTypeContents.forEach(c => {
                    c.classList.remove('active');
                    c.style.display = 'none';
                });

                tab.classList.add('active');
                const activeContent = document.querySelector(`.checkout-form > .tab-content[data-tab="${tab.dataset.tab}"]`);
                if (activeContent) {
                    activeContent.classList.add('active');
                    activeContent.style.display = 'block';
                }
            });
        });

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏
        const deliveryOptions = document.querySelectorAll('.delivery-option');
        const deliveryForms = document.querySelectorAll('.delivery-form');

        deliveryOptions.forEach(option => {
            option.addEventListener('click', async () => {
                deliveryOptions.forEach(o => o.classList.remove('active'));
                deliveryForms.forEach(f => f.style.display = 'none');

                option.classList.add('active');
                const deliveryType = option.dataset.delivery;
                const container = document.querySelector(`.delivery-form[data-delivery-form="${deliveryType}"]`);

                if (!container) return;

                const isLoaded = container.dataset.loaded === 'true';

                if (!isLoaded) {
                    let frameUrl = '';
                    if (deliveryType === 'pickup') {
                        frameUrl = 'my_good_front/frame4.html';
                    } else if (deliveryType === 'courier') {
                        frameUrl = 'my_good_front/frame7.html';
                    } else if (deliveryType === 'postal') {
                        frameUrl = 'my_good_front/frame8.html';
                    }

                    if (frameUrl) {
                        try {
                            const response = await fetch(frameUrl);
                            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                            container.innerHTML = await response.text();
                            container.dataset.loaded = 'true';
                        } catch (error) {
                            console.error(`Failed to fetch ${frameUrl}:`, error);
                            container.innerHTML = '<p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</p>';
                        }
                    }
                }
                
                container.style.display = 'block';
            });
        });

        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–µ –≤ —Å–∞–π–¥–±–∞—Ä
        api('get').then(response => {
            const { cart } = response;
            const summaryContainer = document.querySelector('.order-summary-sidebar .order-summary');
            
            if (cart && cart.length > 0) {
                const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
                const totalPrice = cart.reduce((sum, item) => sum + item.discountPrice * item.quantity, 0);
                const totalOriginalPrice = cart.reduce((sum, item) => sum + item.price * item.quantity, 0);
                const totalDiscount = totalOriginalPrice - totalPrice;

                summaryContainer.innerHTML = `
                    <h3>–í–∞—à –∑–∞–∫–∞–∑</h3>
                    <div class="summary-row">
                        <span>–¢–æ–≤–∞—Ä—ã (${totalItems})</span>
                        <span>${totalOriginalPrice} ‚ÇΩ</span>
                    </div>
                    ${totalDiscount > 0 ? `
                    <div class="summary-row">
                        <span>–°–∫–∏–¥–∫–∞</span>
                        <span class="discount-amount">-${totalDiscount} ‚ÇΩ</span>
                    </div>` : ''}
                    <div class="summary-row total">
                        <span>–ò—Ç–æ–≥–æ</span>
                        <span>${totalPrice} ‚ÇΩ</span>
                    </div>`;
            } else {
                summaryContainer.innerHTML = '<p>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.</p>';
                document.querySelector('.pay-btn').disabled = true;
            }
        });

        // --- –û–ë–©–ê–Ø –õ–û–ì–ò–ö–ê –ú–û–î–ê–õ–¨–ù–´–• –û–ö–û–ù ---
        const mainModalOverlay = document.querySelector('.modal-overlay');
        const mainModalContainer = mainModalOverlay.querySelector('.modal');
        let checkoutData = {}; // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã

        const openModal = (content) => {
            mainModalContainer.innerHTML = content;
            mainModalOverlay.style.display = 'flex';
        };

        const closeModal = () => {
            mainModalOverlay.style.display = 'none';
            mainModalContainer.innerHTML = ''; // –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
        };

        mainModalOverlay.addEventListener('click', (e) => {
            if (e.target === mainModalOverlay || e.target.closest('.modal-close')) {
                closeModal();
            }
        });

        // --- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –Æ–†. –õ–ò–¶–ê ---
        document.querySelector('.add-legal-btn').addEventListener('click', async () => {
            try {
                const response = await fetch('my_good_front/frame10.html');
                if (!response.ok) throw new Error('Failed to load legal entity form');
                const formHtml = await response.text();
                openModal(formHtml + '<button class="modal-close">√ó</button>');
            } catch (error) {
                console.error(error);
                openModal('<p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã.</p><button class="modal-close">√ó</button>');
            }
        });

        // --- –°–ë–û–† –î–ê–ù–ù–´–• –ò –û–¢–ö–†–´–¢–ò–ï –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê –û–ü–õ–ê–¢–´ ---
        const getCheckoutData = () => {
            const activePersonTab = document.querySelector('.person-type-tabs .tab.active').dataset.tab;
            const activeDeliveryOption = document.querySelector('.delivery-option.active').dataset.delivery;
            const deliveryForm = document.querySelector(`.delivery-form[data-delivery-form="${activeDeliveryOption}"]`);
            const deliveryData = {};
            deliveryForm.querySelectorAll('input, select, textarea').forEach(input => {
                deliveryData[input.name || input.placeholder] = input.value;
            });

            let legalData = {};
            if (activePersonTab === 'legal') {
                // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —é—Ä. –ª–∏—Ü–∞ –≥–¥–µ-—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                // –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –ø—É—Å—Ç—ã–º, —Ä–µ–∞–ª–∏–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–∑–∂–µ
            }

            return {
                personType: activePersonTab,
                deliveryType: activeDeliveryOption,
                deliveryDetails: deliveryData,
                legalDetails: legalData
            };
        };

        document.querySelector('.pay-btn').addEventListener('click', async () => {
            checkoutData = getCheckoutData();
            
            try {
                // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—É–º–º—É
                const { cart } = await api('get');
                if (!cart || cart.length === 0) {
                    alert("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!");
                    return;
                }
                const totalPrice = cart.reduce((sum, item) => sum + item.discountPrice * item.quantity, 0);

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ–ø–ª–∞—Ç—ã
                const response = await fetch('payment_modal.html');
                if (!response.ok) throw new Error('Failed to load payment form');
                let paymentHtml = await response.text();
                
                openModal(paymentHtml + '<button class="modal-close">√ó</button>');

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—É –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
                document.querySelector('.payment-total-amount').textContent = `–û–ø–ª–∞—Ç–∏—Ç—å ${totalPrice} ‚ÇΩ`;
                document.querySelector('.payment-final-button').textContent = `–û–ü–õ–ê–¢–ò–¢–¨ ${totalPrice} ‚ÇΩ >`;

                // –ù–∞–≤–µ—à–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É
                document.querySelector('.payment-final-button').addEventListener('click', async () => {
                    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    console.log("Finalizing order with data:", checkoutData);
                    
                    const result = await api('place_order', { orderDetails: checkoutData });

                    if (result.success) {
                        closeModal();
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —ç–∫—Ä–∞–Ω —É—Å–ø–µ—Ö–∞
                        try {
                            const response = await fetch('order_success.html');
                            if (!response.ok) throw new Error('Failed to load success screen');
                            const successHtml = await response.text();
                            
                            const checkoutContent = document.querySelector('.checkout-content');
                            checkoutContent.innerHTML = successHtml;

                            // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
                            const orderIdElement = checkoutContent.querySelector('#order-success-message');
                            if (orderIdElement) {
                                orderIdElement.textContent = `–ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞: #${result.orderId}`;
                            }
                            
                            // –ü—Ä—è—á–µ–º —Å–∞–π–¥–±–∞—Ä –∏ —Ä–∞—Å—à–∏—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
                            const sidebar = document.querySelector('.order-summary-sidebar');
                            if(sidebar) sidebar.style.display = 'none';
                            checkoutContent.style.gridTemplateColumns = '1fr';

                        } catch (error) {
                            console.error(error);
                            // Fallback to simple message
                            document.querySelector('.checkout-content').innerHTML = `
                                <div style="text-align: center; padding: 50px;">
                                    <h2>–ó–∞–∫–∞–∑ ‚Ññ${result.orderId} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!</h2>
                                    <p>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!</p>
                                    <a href="/" class="button">–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</a>
                                </div>`;
                        }
                    } else {
                        alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
                    }
                });

            } catch (error) {
                console.error("Payment modal error:", error);
                openModal('<p>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–æ—Ä–º—ã –æ–ø–ª–∞—Ç—ã.</p><button class="modal-close">√ó</button>');
            }
        });
    }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤
function getNoun(number, one, two, five) {
    let n = Math.abs(number);
    n %= 100;
    if (n >= 5 && n <= 20) {
        return five;
    }
    n %= 10;
    if (n === 1) {
        return one;
    }
    if (n >= 2 && n <= 4) {
        return two;
    }
    return five;
}